#!/usr/bin/bash
shopt -s extglob

path="/home/m_mustafa/Project"
if [ -e "$path" ]; then
    cd "$path"
else
    mkdir -p "$path"
    cd "$path"
    echo "DBMS is ready"
fi

function Create_Database() {
    while true; do
        read -p "Enter name of database: " database_name
        regex="^[a-zA-Z][a-zA-Z0-9_]*$"
        if [[ $database_name =~ $regex ]]; then
               if [[ -e "$path/$database_name" ]]; then

                echo "The Database already exists!"
            else
                mkdir "$path/$database_name"
		cd ..
                echo "Database created successfully."
            fi
	    cd "$path"
            break
        else
            echo "Invalid database name. Use only letters, numbers, and underscores. It must start with a letter."
        fi
    done
}

function List_Databases() {
    echo "Databases:"
    ls -d */
}

function Create_Table() {
    read -p "Enter table name: " table_name
    regex="^[a-zA-Z][a-zA-Z0-9_]*$"
    if [[ $table_name =~ $regex ]]; then
        if [[ -f "$table_name" ]]; then
            echo "The table already exists!"
        else
            read -p "Enter the number of columns: " num_cols
            PK=0
            metadata=""
            for ((i = 0; i < num_cols; i++)); do
                line=""
                read -p "Enter column name: " col_name
                line+="$col_name"
                read -p "Enter column datatype(int/str): " col_datatype
                line+=":$col_datatype"
                if [[ $PK -eq 0 ]]; then
                    read -p "Do you want to make this column PK? (y/n) " check_pk
                    if [[ "$check_pk" =~ ^[Yy](es)?$ ]]; then
                        line+=":PK"
                        PK=1
                    fi
                fi
                metadata+="$line\n"
            done
            echo -e "$metadata" >".$table_name.metadata"
            touch "$table_name"
            echo "Table created successfully."
        fi
    else
        echo "Invalid table name. Use only letters, numbers, and underscores."
    fi
}

function List_Tables() {
    echo "Tables:"
    ls -p | grep -v / | grep -v "^\."
}

function Insert_Data() {
    read -p "Enter table name to insert data: " table_name
    if [[ ! -f "$table_name" ]]; then
        echo "Table does not exist!"
        return
    fi
    metadata_file=".$table_name.metadata"
    if [[ ! -f "$metadata_file" ]]; then
        echo "Metadata file missing!"
        return
    fi
    IFS=$'\n' read -d '' -r -a columns <"$metadata_file"
    data_entry=""
    for column in "${columns[@]}"; do
        col_name=$(echo "$column" | cut -d':' -f1)
        read -p "Enter value for $col_name: " value
        if [[ -z "$data_entry" ]]; then
            data_entry="$value"
        else
            data_entry+="|$value"
        fi
    done
    echo "$data_entry" >>"$table_name"
    echo "Data inserted successfully!"
}

function Select_From_Table() {
    read -p "Enter table name to select data from: " table_name
    if [[ ! -f "$table_name" ]]; then
        echo "Table does not exist!"
        return
    fi
    echo "===== Table: $table_name ====="
    cat "$table_name"
    echo "============================="
}

function Drop_Table() {
    read -p "Enter table name to drop: " table_name
    if [[ -f "$table_name" ]]; then
        rm "$table_name" ".$table_name.metadata"
        echo "Table $table_name deleted successfully."
    else
        echo "Table does not exist."
    fi
}

function Database_Menu() {
    while true; do
        echo -e "\nTable Menu:"
        echo "1) Create Table   2) List Tables   3) Drop Table   4) Insert Data"
        echo "5) View Table     6) Exit"
        read -p "#? " choice
        case $choice in
            1) Create_Table ;;
            2) List_Tables ;;
            3) Drop_Table ;;
            4) Insert_Data ;;
            5) Select_From_Table ;;
            6) cd ..; break ;;
            *) echo "Invalid choice, please select again." ;;
        esac
    done
}

function Select_Database() {
    while true; do
        read -p "Enter database name (or q to exit): " SelectedDatabase
        if [[ "$SelectedDatabase" == "q" ]]; then
            return
        fi
        if [[ -d "$path/$SelectedDatabase" ]]; then
            cd "$path/$SelectedDatabase"
            echo "$SelectedDatabase is now selected."
            Database_Menu
            cd "$path"
        else
            echo "Database does not exist."
        fi
    done
}

function Drop_Database() {
    read -p "Enter database name to drop: " DropDatabase
    if [[ -d "$DropDatabase" ]]; then
        rm -r "$DropDatabase"
        echo "Database $DropDatabase deleted successfully."
    else
        echo "Database does not exist."
    fi
}

function Main_Menu() {
    while true; do
        echo -e "\nDatabase Menu:"
        echo "1) Create Database   2) List Databases   3) Select Database   4) Drop Database   5) Exit"
        read -p "#? " choice
        case $choice in
            1) Create_Database ;;
            2) List_Databases ;;
            3) Select_Database ;;
            4) Drop_Database ;;
            5) exit 0 ;;
            *) echo "Invalid choice, please select again." ;;
        esac
    done
}

# Start the menu
Main_Menu
